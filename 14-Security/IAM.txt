# Brief document on Identity and Access Management

Best practices of implementing IAM in any AWS account:

- Grant the least privileges. Ensuring a principle of least principles ensures that
  identities are permitted to perform most minimal set of functions to fulfil a specific
  task by granting least access without affecting usability and efficiency.
- Enable identity federation. Centrally manage all the users and groups for all the
  applications in AWS account. For managing users and groups across multiple AWS accounts
  in an Organization, we can use AWS Single Sign On.
- Enable MFA
- Rotate credentials regularly.
- Enable IAM Access Analyzer, to enable public and cross-organization access.
- Attach IAM policies to the IAM user groups to restrict access to the AWS services.

# IAM Roles
- IAM Roles allows Users, other AWS services and applications to adopt a set of
  temporary IAM permissions to access AWS resources.
- IAM roles allow trusted users to set of AWS resources or applications to adopt a
  set of temporary credentials.
- Much like identities, Roles have certain set of permissions defined what resources can and
  can't be accessed.
- IAM roles are designed to be assumed by multiple entities unlike Users which is
  defined for single entity/identity.
- Roles are used for temporary access to gain access to resources. And each time
  a Role is used by a user/entity to access a AWS resource or application, a temporary
  credential is generated for that particular session.
- IAM Roles can be used for a user from one account to access the resources from
  another AWS account.
- IAM Roles can be used by federated users to access AWS resources temporarily.
- IAM roles can also be used by AWS services to access services from your behalf
  or an application requires access to resources which can be used by Roles instead
  of embedding credentials within an application.

# IAM Policies
- IAM Policies are written in JSON document and these define what can and can't be
  accessed. These policies can be attached to Users, User groups and Roles.
- Policies include Managed Policies and In-line policies.
- Managed Policies are viewed as library of usable policies. Managed Policies can be
  applied to multiple users and groups and Roles.
- These are list of predefined policies granting varied access to different AWS services.
- Unlike Managed Policies, In-line policies are not stored in a library, instead they
  have to be written and explicitly embedded within a User, User Group, Role. As a
  result, same policy cant be applied to another identity like Managed Policies.

# Identity Providers
- Used to provides federated access to AWS resources. Federated Access allows credentials
  external to AWS to be used as a means for authentication. Identity providers such
  as ADFS servers, Google, Facebook. This prevents you from having to create individual
  IAM user accounts.

# Security Token Service Endpoints
- STS service is used to allow you to request temporary, limited privilege credentials with
  for both IAM users and federated users.

# Service Control policies
- Service Control Policies are different from Identity based policies as SCPs do not
  grant permissions themselves.
- Instead, SCPs are used with AWS Organizations, to implement and set a boundary of
  permissions for AWS accounts.
- For example, if a user has full permissions to S3, RDS and EC2 via identity policy,
  however, if a there is a SCP associated with the AWS account which denies access
  to S3 then the user will not be able to access S3 despite having full access via
  identity policy.

# Access Keys
- Access keys are used for programmatic access to your AWS resources.
- It comprises of two elements - Access Key ID (20 random uppercase alpha-num chars)
  and Secret Access key (40 random upper and lowercase alpha-num and non alpha-num chars).

# IAM Services Roles to access AWS resources on your behalf
- An AWS service Roles allows access to other AWS service resource within your own
  account on your behalf.
- This is commonly used for EC2 instances to assume access to resources on your behalf.
- For example, we have an EC2 instance running an application which requires access to
  AWS S3 to perform relevant PUT and GET API calls. Instead of embedding credentials
  within the application, it is better to use the EC2 Roles to allow EC2 to access
  S3 on your behalf. This also helps us in reducing the administrative burden of
  rotating credentials for security purposes.
